/*****************************************
 *         STARTINGAMES Software
 *
 * Project : MemberStat
 * File : window_search_member.cpp
 *
 ****************************************/

#include "window_search_member.h"

window_search_member::window_search_member(QWidget *_parent) : QMainWindow(_parent)
{
    setWindowTitle(APP_NAME" - "+tr("Search Members"));

    QLabel *regNumLabel = new QLabel(tr("Registration Number"), this);
    QLabel *genderLabel = new QLabel(tr("Gender"), this);
    QLabel *memberTypeLabel = new QLabel(tr("Member Type"), this);
    QLabel *firstNameLabel = new QLabel(tr("First Name"), this);
    QLabel *lastNameLabel = new QLabel(tr("Last Name"), this);

    regNum = new QLineEdit(this);
    gender = new QComboBox(this);
    memberType = new QComboBox(this);
    firstName = new QLineEdit(this);
    otherName = new QCheckBox(tr("Search also in Other Name"), this);
    lastName = new QLineEdit(this);
    autoLast = new QCheckBox(tr("Same as Last Name"), this);
        connect(autoLast, SIGNAL(stateChanged(int)), lastName, SLOT(setDisabled(bool)));

    result = new QLabel(tr("Ready"), this);
    search = new QPushButton(QIcon(ICON_SEARCH), tr("Search"), this);
        connect(search, SIGNAL(released()), this, SLOT(searchExec()));
    table = new QTableWidget(0, 10, this);
        table->setAlternatingRowColors(true);
        table->setStyleSheet("alternate-background-color: rgb(210,240,250);");
        table->setColumnHidden(0, true);
        table->verticalHeader()->setHidden(true);
        table->setSelectionMode(QAbstractItemView::SingleSelection);
        table->setSelectionBehavior(QAbstractItemView::SelectRows);
        table->setEditTriggers(QAbstractItemView::NoEditTriggers);
        QStringList horizontalHeaders;
        horizontalHeaders << "id" << tr("Reg Num") << tr("First Name") << tr("Other Name") << tr("Last Name") << tr("Age") << tr("Birth Date") << tr("Birth Location") << tr("Member Type") << tr("Gender");
        table->setHorizontalHeaderLabels(horizontalHeaders);
        table->resizeColumnsToContents();
        table->sortByColumn(1, Qt::AscendingOrder);
        table->verticalHeader()->setDefaultSectionSize(40);
        //connect(table, SIGNAL(itemSelectionChanged()), this, SLOT(versionSelChange()));
        //connect(table, SIGNAL(itemDoubleClicked(QTableWidgetItem*)), this, SLOT(openVersion(QTableWidgetItem*)));

    QHBoxLayout *topLayout = new QHBoxLayout(this);
        topLayout->addWidget(regNumLabel);
        topLayout->addWidget(regNum);
        topLayout->addWidget(genderLabel);
        topLayout->addWidget(gender);
        topLayout->addWidget(memberTypeLabel);
        topLayout->addWidget(memberType);

    QHBoxLayout *bottomLayout = new QHBoxLayout(this);
        bottomLayout->addWidget(result);
        bottomLayout->addWidget(search);

    QGridLayout *mainLayout = new QGridLayout(this);
        mainLayout->addLayout(topLayout, 0, 0, 1, 3);
        mainLayout->addWidget(firstNameLabel, 1, 0);
        mainLayout->addWidget(firstName, 1, 1);
        mainLayout->addWidget(otherName, 1, 2);
        mainLayout->addWidget(lastNameLabel, 2, 0);
        mainLayout->addWidget(lastName, 2, 1);
        mainLayout->addWidget(autoLast, 2, 2);
        mainLayout->addLayout(bottomLayout, 3, 0, 1, 3);
        mainLayout->addWidget(table, 4, 0, 1, 3);

    QWidget *centralWidget = new QWidget(this);
        centralWidget->setLayout(mainLayout);
    setCentralWidget(centralWidget);
}

void window_search_member::searchExec()
{
    result->setText(tr("searching..."));
    int count = 0;
    table->setRowCount(0);

    uint8_t flags=0;
    if(!regNum->text().isEmpty()) { flags+=1; }
    //if(!regNum->text().isEmpty()) { flags+=1; }
    //if(!regNum->text().isEmpty()) { flags+=1; }
    if(!firstName->text().isEmpty()) { flags+=8; }
    if(otherName->isChecked()) { flags+=16; }
    if(!lastName->text().isEmpty() || autoLast->isChecked()) { flags+=32; }

    QString queryString = "SELECT *,TIMESTAMPDIFF(YEAR, birthDate, CURDATE()) AS age FROM members";

    if(flags>0)
    {
        queryString+=" WHERE ";
        if(flags&1)
        {
            queryString+= "regNum LIKE '%"+engine_db::echap(regNum->text())+"%'";
            flags-=1;
            if(flags>0) { queryString+=" AND "; }
        }
        if(flags&(8+16+32)) { queryString+="( "; }
        if(flags&8)
        {
            queryString+= "firstName LIKE '%"+engine_db::echap(firstName->text())+"%'";
            if(flags&(16+32)) { queryString+=" OR "; }
        }
        if(flags&16)
        {
            queryString+= "otherName LIKE '%"+engine_db::echap(firstName->text())+"%'";
            if(flags&32) { queryString+=" OR "; }
        }
        if(flags&32)
        {
            if(autoLast->isChecked())
            {
                queryString+="lastName LIKE '%"+engine_db::echap(firstName->text())+"%'";
            }
            else
            {
                queryString+="lastName LIKE '%"+engine_db::echap(lastName->text())+"%'";
            }
        }
        if(flags&(8+16+32)) { queryString+=" )"; flags=flags&0b11000111; }
    }

    QSqlQuery query;
    query.prepare(queryString);
    if(query.exec())
    {
        if(query.next())
        {
            table->setRowCount(count+1);
            table->setItem(count, 0, new QTableWidgetItem(query.record().value("id").toString()));
            table->setItem(count, 1, new QTableWidgetItem(query.record().value("regNum").toString()));
            table->setItem(count, 2, new QTableWidgetItem(query.record().value("firstName").toString()));
            table->setItem(count, 3, new QTableWidgetItem(query.record().value("otherName").toString()));
            table->setItem(count, 4, new QTableWidgetItem(query.record().value("lastName").toString()));
            table->setItem(count, 5, new QTableWidgetItem(query.record().value("age").toString()));
            table->setItem(count, 6, new QTableWidgetItem(query.record().value("birthDate").toString()));
            table->setItem(count, 7, new QTableWidgetItem(query.record().value("birthLocation").toString()));
            table->setItem(count, 8, new QTableWidgetItem(query.record().value("memberType").toString()));
            table->setItem(count, 9, new QTableWidgetItem(query.record().value("gender").toString()));
            count++;
        }
    }
    else
    {
        engine_db::dispERR(this, query);
    }

    result->setText(QString::number(count)+tr(" Result(s) Found"));
    table->resizeColumnsToContents();
}
